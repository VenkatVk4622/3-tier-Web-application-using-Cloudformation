Lets Get started!..
This CloudFormation template creates a 3-Tier Web Application Architecture with Web, App, and Database tiers in AWS. Here's a step-by-step explanation of the template:
1. General Information
AWSTemplateFormatVersion: 
Indicates the version of the CloudFormation template format.
Description: 
Describes the purpose of the stack (3-Tier Web Application).
2. Parameters
User-defined inputs to customize the stack during creation:
AMI: 
The Amazon Machine Image ID for EC2 instances.
InstanceType: 
Specifies the type of EC2 instances (default: t2.micro).
KeyPair: 
Name of the SSH key pair for EC2 instances.
DBUsername and DBPassword: 
Credentials for the RDS database. The password is hidden (NoEcho: true).
3. Resources
Networking Components
VPC:
Creates a Virtual Private Cloud with CIDR 10.0.0.0/16.
Internet Gateway (IGW):
Enables internet access for public resources in the VPC.
VPCGatewayAttachment:
Connects the IGW to the VPC.
Subnets:
Public Subnet 1: 
For the web and app tiers (10.0.1.0/24).
Public Subnet 2: 
For the Load Balancer (10.0.4.0/24).
Private Subnet 1 & 2: 
For the database tier (10.0.2.0/24 and 10.0.3.0/24).
Route Table:
Public Route Table: 
Configured to route all traffic (0.0.0.0/0) through the IGW.
Subnet Associations: 
Associates the public subnets with the public route table.
Security Groups
InstanceSecurityGroup:
Allows inbound traffic for:
SSH (port 22) from anywhere.
HTTP (port 80) from anywhere.
RDSSecurityGroup:
Restricts MySQL (port 3306) access to instances within 
InstanceSecurityGroup.
Compute Resources
WebInstance:
An EC2 instance in the public subnet to host the web application.
AppInstance:
Another EC2 instance in the public subnet to handle application logic.
Database Resources
RDSInstance:
A MySQL RDS database instance configured with:
Private subnets for security.
Not publicly accessible.
VPC Security Group (RDSSecurityGroup).
Uses DBSubnetGroup to operate in private subnets.
DBSubnetGroup:
Groups private subnets for the database.
LoadBalancer:
An Application Load Balancer (ALB) in the public subnets for distributing traffic.
Internet-facing, accessible via HTTP on port 80.
Listener:
Routes traffic to the backend Target Group.
TargetGroup:
Links EC2 instances (TargetType: instance) to the Load Balancer.
4. Outputs
LoadBalancerDNS: 
Provides the DNS name of the Load Balancer, which can be used to access the web application.

How the Template Works
Networking Layer Setup:
The VPC, subnets, route tables, and IGW establish a secure and scalable network environment.
Compute Layer:
EC2 instances for web and application tiers are created in public subnets with a shared security group.
Database Layer:
A private, secure MySQL RDS instance is set up in private subnets.
Load Balancer:
Distributes incoming HTTP traffic to the EC2 instances in the Target Group.
Security:
Security Groups enforce rules for accessing instances and the database.